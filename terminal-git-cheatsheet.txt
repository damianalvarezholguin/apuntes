----------------------  TERMINAL  --------------------------
..........................................................
pwd                  | Ruta actual
cd (directory)       | Change directory
cd ..                | Sube de directorio
ls                   | Lista los elementos del directorio actual
ls -actual           | Nos muestra todos los archivos, incluidos ocultos
ls -l                | Lista y muestra permisos
clear                | Limpia el terminal
..........................................................
touch (file)         | Crea un archivo
cat (file)           | Lee un archivo
nano (file)          | Abre un archivo para editar en terminal
cp (file) /path      | Copia un archivo
mv (file) /path      | Mueve un archivo o directorio. Si utilizas el mismo origen que destino, lo renombras.
rm (file)            | Borra un archivo
mkdir (directory)    | Crea una carpeta
rmdir (directory)    | Borra una carpeta
rm -r (directory)    | Borra una carpeta incluso si tiene contenido
..........................................................
shutdown             | Apaga la pc
shutdown -r          | Reinicia

------------------------  GIT  -----------------------------
--------------------  Configuracion  -----------------------
git --version               | Te indica la version actual de git
git config --global -e      | Nos enseña nuestra config en VS code
git config -h               | Opciones de configuracion
git config --global (cambio)| Hace que los cambios de configuracion que hagamos sean globales. Ejemplo de configuración:

git config --global user.name "Damian Alvarez"
git config --global user.email damianalvarezholguin@gmail.com 
git config --global core.editor "code --wait"
git config --global core.autocrlf true

------------  Inicializacion proceso de commit --------------
Todos los archivos deben pasar por 3 etapas: untracked -> stage -> commit
untracked: el repositorio no lo esta siguiendo
stage: confirmamos los cambios y lo preparamos para comprometer el archivo (si lo modificamos deberemos hacer add de nuevo, si no, se comprometería la version sin cambiar)
commit: comprometemos los cambios, así es como se va a subir al repositorio

git init             | Inicializa un repositorio en el directorio actual
git status           | Muestra el estado actual del repositorio
git status -s        | Muestra estado simplificado
git add (file) (fi   | Pasa un archivo de "untracked" a la etapa de stage
git add .            | Pasa todo a etapa de stage (no recomendado)
git commit -m "Mensaje" | Comprometemos los archivos que estén en stage
git diff             | Muestra el texto cambiado en los archivos untracked
git diff --staged    | Muestra los cambios de los archivos en etapa de stage

------------------  Gestión de archivos  -------------------
git rm (file)        | Elimina y agrega a stage
git mv (file)        | Mueve y agrega a stage
git restore --staged (file)  | Deshace cambios y devuelve el archivo de stage a untracked
git restore (file)   | Deshace cambios y recupera el archivo aunque haya sido eliminado

-------------------------  Log  ----------------------------
git log              | Muestra un historial de cambios
git log --oneline    | Muestra un historial de cambios con un hash identificador

---------------------  Ramas/Branch  -----------------------
git branch                  | Indica la rama actual
git checkout -b (nombreRama)| Crea una rama
git checkout (nombreRama)   | Nos mueve a la rama indicada
git merge (nombreRama)      | Trae los cambios de nombreRama a la rama actual

--------------------  Subir el código  ----------------------
git remote add origin https://github.com/damianalvarezholguin/apuntes.git | "Remote" indica que vamos a subir nuestro código a un servidor remoto y "add origin" define de dónde vamos a obtener nuestro código y a dónde vamos a enviarlo.
git push -u origin main     | Creamos en el repositorio la rama a la que vamos a subir nuestro código
git push                    | Subimos el código